# Default YAML
# Line wrap recommended
# Don't forget to change variables every QEMU update!
name: Build Stable branch

on:
  - push
  - pull_request
  - workflow_dispatch
  
jobs:
   MINGW64-Windows:
   
     runs-on: windows-2019       
     env:
      pkgver: '9.2.1'
      patch:  '00-qemu92x-mesa-glide.patch'
      mspkg: 'mingw-w64-x86_64'
      
     steps:  
     - name: Checkout repo
       uses: actions/checkout@v4
       
     - name: Setup MSYS2
       uses: msys2/setup-msys2@v2
       with:
         msystem: MINGW64
         update: true
         install: >-
          base 
          base-devel
          dos2unix
          gcc
          git
          make
          ninja
          patch
          python 
          rsync
          wget
          zstd
          ${{ env.mspkg }}-python
          ${{ env.mspkg }}-python-distlib
          ${{ env.mspkg }}-python-setuptools
          ${{ env.mspkg }}-python-sphinx
          ${{ env.mspkg }}-python-sphinx_rtd_theme
          ${{ env.mspkg }}-angleproject
          ${{ env.mspkg }}-autotools
          ${{ env.mspkg }}-binutils
          ${{ env.mspkg }}-toolchain
          ${{ env.mspkg }}-tools
          ${{ env.mspkg }}-7zip
          ${{ env.mspkg }}-cairo
          ${{ env.mspkg }}-capstone
          ${{ env.mspkg }}-curl
          ${{ env.mspkg }}-cyrus-sasl
          ${{ env.mspkg }}-dtc
          ${{ env.mspkg }}-expat
          ${{ env.mspkg }}-fontconfig
          ${{ env.mspkg }}-freetype
          ${{ env.mspkg }}-gcc
          ${{ env.mspkg }}-gdk-pixbuf2
          ${{ env.mspkg }}-gettext-runtime
          ${{ env.mspkg }}-gettext-tools
          ${{ env.mspkg }}-glib2
          ${{ env.mspkg }}-gnutls
          ${{ env.mspkg }}-gst-libav
          ${{ env.mspkg }}-gst-plugins-ugly
          ${{ env.mspkg }}-gtk3
          ${{ env.mspkg }}-gtk-vnc
          ${{ env.mspkg }}-jack2
          ${{ env.mspkg }}-libcacard
          ${{ env.mspkg }}-libgcrypt
          ${{ env.mspkg }}-libepoxy
          ${{ env.mspkg }}-libnfs
          ${{ env.mspkg }}-libpng
          ${{ env.mspkg }}-libslirp
          ${{ env.mspkg }}-libssh
          ${{ env.mspkg }}-libssh2
          ${{ env.mspkg }}-libtasn1
          ${{ env.mspkg }}-libusb
          ${{ env.mspkg }}-libxml2
          ${{ env.mspkg }}-lz4
          ${{ env.mspkg }}-lzo2
          ${{ env.mspkg }}-meson
          ${{ env.mspkg }}-msitools
          ${{ env.mspkg }}-ncurses
          ${{ env.mspkg }}-nettle
          ${{ env.mspkg }}-ninja
          ${{ env.mspkg }}-pcre2
          ${{ env.mspkg }}-pixman
          ${{ env.mspkg }}-pkgconf
          ${{ env.mspkg }}-pulseaudio
          ${{ env.mspkg }}-SDL2
          ${{ env.mspkg }}-SDL2_image
          ${{ env.mspkg }}-SDL2_sound
          ${{ env.mspkg }}-snappy
          ${{ env.mspkg }}-spice
          ${{ env.mspkg }}-spice-gtk
          ${{ env.mspkg }}-spice-protocol
          ${{ env.mspkg }}-usbredir
          ${{ env.mspkg }}-virglrenderer
          ${{ env.mspkg }}-xz
          ${{ env.mspkg }}-zlib
          ${{ env.mspkg }}-zstd
          
     - name: Extracting build
       continue-on-error: true
       shell: msys2 {0}
       run:  |
        echo "Downloading src"
        wget -q https://download.qemu.org/qemu-${{ env.pkgver }}.tar.xz
        echo "Extracting src"
        tar xf qemu-${{ env.pkgver }}.tar.xz 
        echo "Don't mind the error, It's a windows feature"
        
     - name: Patching build
       shell: msys2 {0}
       run:  |
        echo "Adding files to src"
        rsync -rv qemu-0/hw/3dfx qemu-1/hw/mesa qemu-${{ env.pkgver }}/hw/
        cd qemu-${{ env.pkgver }}
        echo "Patching files to src"
        patch -p0 -i ../${{ env.patch }}
        echo "Signing commit id to src"
        bash ../scripts/sign_commit

     - name: Configure build
       working-directory: ./build
       shell: msys2 {0}
       run: |
        echo "Configuring build"
        ../qemu-${{ env.pkgver }}/configure --target-list="x86_64-softmmu,i386-softmmu" --prefix=$(pwd)/../install_dir

     - name: Compile build
       working-directory: ./build
       shell: msys2 {0}
       run: |
        echo "Compiling Build"
        make -j$(nproc)

     - name: Compile Host Openglide
       working-directory: ./build
       shell: msys2 {0}
       run: |
        git submodule update --init --recursive
        cd ../wrappers/extra/openglide
        bash ./bootstrap
        mkdir ../build && cd ../build
        ../openglide/configure --disable-sdl && make
        mkdir ../../../install_dir
        cp -v .libs/libglide2x.dll ../../../install_dir/libglide2x.dll
        cp -v .libs/libglide3x.dll ../../../install_dir/libglide3x.dll
        cp -v ../../../MINGW-packages/openglide-3dfx/q3dlog.sh ../../../install_dir/q3dlog.sh

     - name: Installing build
       working-directory: ./build
       shell: msys2 {0}
       run: |
        echo "Installing build to output"
        make install
        cd ../install_dir
        bash ../scripts/sign_binary
        cat <<EOF > version.txt
        QEMU-3dfx-arch (Windows Build)
        =================================================
        GitHub Actions Artifact Build
        Version ${{ env.pkgver }}
        Built using ${MSYSTEM} 
        EOF
        unix2dos version.txt build-timestamp.txt
        echo "Finished build at $(date)"

     - name: Uploading build
       uses: actions/upload-artifact@v4
       with:
        name: bin-windows-mingw64-${{ env.pkgver }}-artifact
        path: ./install_dir

   UCRT64-Windows:

    runs-on: windows-2019
    env:
     pkgver: '9.2.1'
     patch:  '00-qemu92x-mesa-glide.patch'
     mspkg: 'mingw-w64-ucrt-x86_64'

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: >-
          base
          base-devel
          dos2unix
          gcc
          git
          make
          ninja
          patch
          python
          rsync
          wget
          zstd
          ${{ env.mspkg }}-python
          ${{ env.mspkg }}-python-distlib
          ${{ env.mspkg }}-python-setuptools
          ${{ env.mspkg }}-python-sphinx
          ${{ env.mspkg }}-python-sphinx_rtd_theme
          ${{ env.mspkg }}-angleproject
          ${{ env.mspkg }}-autotools
          ${{ env.mspkg }}-binutils
          ${{ env.mspkg }}-toolchain
          ${{ env.mspkg }}-tools
          ${{ env.mspkg }}-7zip
          ${{ env.mspkg }}-cairo
          ${{ env.mspkg }}-capstone
          ${{ env.mspkg }}-curl
          ${{ env.mspkg }}-cyrus-sasl
          ${{ env.mspkg }}-dtc
          ${{ env.mspkg }}-expat
          ${{ env.mspkg }}-fontconfig
          ${{ env.mspkg }}-freetype
          ${{ env.mspkg }}-gcc
          ${{ env.mspkg }}-gdk-pixbuf2
          ${{ env.mspkg }}-gettext-runtime
          ${{ env.mspkg }}-gettext-tools
          ${{ env.mspkg }}-glib2
          ${{ env.mspkg }}-gnutls
          ${{ env.mspkg }}-gst-libav
          ${{ env.mspkg }}-gst-plugins-ugly
          ${{ env.mspkg }}-gtk3
          ${{ env.mspkg }}-gtk-vnc
          ${{ env.mspkg }}-jack2
          ${{ env.mspkg }}-libcacard
          ${{ env.mspkg }}-libgcrypt
          ${{ env.mspkg }}-libepoxy
          ${{ env.mspkg }}-libnfs
          ${{ env.mspkg }}-libpng
          ${{ env.mspkg }}-libslirp
          ${{ env.mspkg }}-libssh
          ${{ env.mspkg }}-libssh2
          ${{ env.mspkg }}-libtasn1
          ${{ env.mspkg }}-libusb
          ${{ env.mspkg }}-libxml2
          ${{ env.mspkg }}-lz4
          ${{ env.mspkg }}-lzo2
          ${{ env.mspkg }}-meson
          ${{ env.mspkg }}-msitools
          ${{ env.mspkg }}-ncurses
          ${{ env.mspkg }}-nettle
          ${{ env.mspkg }}-ninja
          ${{ env.mspkg }}-pcre2
          ${{ env.mspkg }}-pixman
          ${{ env.mspkg }}-pkgconf
          ${{ env.mspkg }}-pulseaudio
          ${{ env.mspkg }}-SDL2
          ${{ env.mspkg }}-SDL2_image
          ${{ env.mspkg }}-SDL2_sound
          ${{ env.mspkg }}-snappy
          ${{ env.mspkg }}-spice
          ${{ env.mspkg }}-spice-gtk
          ${{ env.mspkg }}-spice-protocol
          ${{ env.mspkg }}-usbredir
          ${{ env.mspkg }}-virglrenderer
          ${{ env.mspkg }}-xz
          ${{ env.mspkg }}-zlib
          ${{ env.mspkg }}-zstd

    - name: Extracting build
      continue-on-error: true
      shell: msys2 {0}
      run:  |
        echo "Downloading src"
        wget -q https://download.qemu.org/qemu-${{ env.pkgver }}.tar.xz
        echo "Extracting src"
        tar xf qemu-${{ env.pkgver }}.tar.xz 
        echo "Don't mind the error, It's a windows feature"

    - name: Patching build
      shell: msys2 {0}
      run:  |
        echo "Adding files to src"
        rsync -rv qemu-0/hw/3dfx qemu-1/hw/mesa qemu-${{ env.pkgver }}/hw/
        cd qemu-${{ env.pkgver }}
        echo "Patching files to src"
        patch -p0 -i ../${{ env.patch }}
        echo "Signing commit id to src"
        bash ../scripts/sign_commit

    - name: Configure build
      working-directory: ./build
      shell: msys2 {0}
      run: |
        echo "Configuring build"
        ../qemu-${{ env.pkgver }}/configure --target-list="x86_64-softmmu,i386-softmmu" --prefix=$(pwd)/../install_dir

    - name: Compile build
      working-directory: ./build
      shell: msys2 {0}
      run: |
        echo "Compiling Build"
        make -j$(nproc)

    - name: Compile Host Openglide
      working-directory: ./build
      shell: msys2 {0}
      run: |
        git submodule update --init --recursive
        cd ../wrappers/extra/openglide
        bash ./bootstrap
        mkdir ../build && cd ../build
        ../openglide/configure --disable-sdl && make
        mkdir ../../../install_dir
        cp -v .libs/libglide2x.dll ../../../install_dir/libglide2x.dll
        cp -v .libs/libglide3x.dll ../../../install_dir/libglide3x.dll
        cp -v ../../../MINGW-packages/openglide-3dfx/q3dlog.sh ../../../install_dir/q3dlog.sh

    - name: Installing build
      working-directory: ./build
      shell: msys2 {0}
      run: |
        echo "Installing build to output"
        make install
        cd ../install_dir
        bash ../scripts/sign_binary
        cat <<EOF > version.txt
        QEMU-3dfx-arch (Windows Build)
        =================================================
        GitHub Actions Artifact Build
        Version ${{ env.pkgver }}
        Built using ${MSYSTEM} 
        EOF
        unix2dos version.txt build-timestamp.txt 
        echo "Finished build at $(date)"

    - name: Uploading build
      uses: actions/upload-artifact@v4
      with:
        name: bin-windows-ucrt64-${{ env.pkgver }}-artifact
        path: ./install_dir


        
   Wrappers:
   
    runs-on: windows-2019       
     
    steps:  
    - name: Checkout repo
      uses: actions/checkout@v4
      
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW32
        update: true
        install: >-
         base-devel
         dos2unix
         git
         unzip
         vim
         wget
         xorriso
         mingw-w64-i686-autotools
         mingw-w64-i686-binutils
         mingw-w64-i686-gcc
         mingw-w64-i686-tools

    - name: Adding optional support
      shell: msys2 {0}
      run:  |
       echo "initialize submodules"
       git submodule update --init --recursive
       echo "Downloading watcom"
       wget -q https://github.com/open-watcom/open-watcom-v2/releases/download/2025-01-03-Build/ow-snapshot.tar.xz
       echo "Downloading djgpp"
       wget -q https://github.com/andrewwutw/build-djgpp/releases/download/v3.4/djgpp-mingw-gcc1220.zip
       mkdir watcom
       echo "Extracting watcom"
       tar xf ow-snapshot.tar.xz -C watcom
       echo "Extracting djgpp"
       unzip djgpp-mingw-gcc1220.zip
       cp -v djgpp/i586-pc-msdosdjgpp/bin/dxe* djgpp/bin

    - name: Compile wrappers
      shell: msys2 {0}
      run: |
        echo "Adding Environment Variables"
        export WATCOM=$(pwd)/watcom
        export PATH=$WATCOM/binnt:$PATH:$WATCOM/binw:$PATH
        export EDPATH=$WATCOM/eddat
        export PATH=$(pwd)/djgpp/bin:$PATH
        echo "Compiling 3dfx wrappers"
        cd wrappers/3dfx
        mkdir build && cd build
        bash ../../../scripts/conf_wrapper
        make && make clean
        echo "Compiling Mesa wrappers"
        cd ../../mesa
        mkdir build && cd build
        bash ../../../scripts/conf_wrapper
        make all+ && make clean
        echo "Compiling Guest Openglide"
        cd ../../extra/openglide/
        bash ./bootstrap
        mkdir ../build && cd ../build
        ../openglide/configure --disable-sdl && make 
        echo "Compilng g2xwrap"
        cd ../g2xwrap
        make

    - name: Installing wrappers
      shell: msys2 {0}
      working-directory: ./wrappers/iso
      run: |
       echo "Making Wrapper Disk"
       mkdir -p wrapgl/icd wrapfx g2xwrap
       cp -r ../3dfx/build/* ./wrapfx/
       rm -rf ./wrapfx/lib* ./wrapfx/*.o ./wrapfx/*.def ./wrapfx/*.c ./wrapfx/Makefile
       cp -r ../mesa/build/* ./wrapgl/
       rm -rf ./wrapgl/Makefile
       cp -rv ../extra/g2xwrap/*.dll g2xwrap/
       bash ../../scripts/sign_binary
       cp ../texts/readme.txt readme.txt
       cp ../../LICENSE license.txt
       cp ../texts/icd-enable.reg wrapgl/icd/icd-enable.reg
       cp ../texts/readme_icd.txt wrapgl/icd/readme.txt
       mv wrapgl/qmfxgl32.dll wrapgl/icd/qmfxgl32.dll
       unix2dos autorun.inf open.bat readme.txt wrapgl/icd/readme.txt commit\ id.txt license.txt
       cd ..
       xorriso -as mkisofs -JR -V "VMWRAPPER-$(git log --format="%h" -n 1)" -o wrappers.iso iso
       echo "Finished build at $(date)"

    - name: Uploading wrappers
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-artifact
        path: ./wrappers
